/**
 * Data Integrity Check
 * Verifica integridade dos dados do banco
 * 
 * Uso: node scripts/data_integrity_check.js
 */

const { neon } = require('@neondatabase/serverless');

const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL n√£o configurada');
  process.exit(1);
}

const sql = neon(DATABASE_URL);

async function checkIntegrity() {
  console.log('üîç Verificando integridade dos dados...\n');

  let totalIssues = 0;

  try {
    // 1. Verificar solicita√ß√µes √≥rf√£s (sem solicitante v√°lido)
    console.log('1Ô∏è‚É£  Verificando solicita√ß√µes √≥rf√£s...');
    const [orphanRequests] = await sql`
      SELECT COUNT(*) as count 
      FROM material_requests mr
      LEFT JOIN users u ON mr.solicitante_id = u.id
      WHERE mr.deleted_at IS NULL 
      AND (u.id IS NULL OR u.deleted_at IS NOT NULL)
    `;

    if (parseInt(orphanRequests.count) > 0) {
      console.log(`   ‚ö†Ô∏è  ${orphanRequests.count} solicita√ß√µes sem solicitante v√°lido`);
      totalIssues += parseInt(orphanRequests.count);
    } else {
      console.log(`   ‚úÖ Nenhuma solicita√ß√£o √≥rf√£ encontrada`);
    }

    // 2. Verificar hist√≥rico sem solicita√ß√£o
    console.log('\n2Ô∏è‚É£  Verificando hist√≥rico √≥rf√£o...');
    const [orphanHistory] = await sql`
      SELECT COUNT(*) as count 
      FROM request_history rh
      LEFT JOIN material_requests mr ON rh.request_id = mr.id
      WHERE mr.id IS NULL
    `;

    if (parseInt(orphanHistory.count) > 0) {
      console.log(`   ‚ö†Ô∏è  ${orphanHistory.count} registros de hist√≥rico sem solicita√ß√£o`);
      totalIssues += parseInt(orphanHistory.count);
    } else {
      console.log(`   ‚úÖ Todo hist√≥rico est√° vinculado a solicita√ß√µes`);
    }

    // 3. Verificar quantidades inv√°lidas
    console.log('\n3Ô∏è‚É£  Verificando quantidades inv√°lidas...');
    const [invalidQuantities] = await sql`
      SELECT COUNT(*) as count 
      FROM material_requests
      WHERE deleted_at IS NULL 
      AND (quantidade IS NULL OR quantidade <= 0)
    `;

    if (parseInt(invalidQuantities.count) > 0) {
      console.log(`   ‚ö†Ô∏è  ${invalidQuantities.count} solicita√ß√µes com quantidade inv√°lida`);
      totalIssues += parseInt(invalidQuantities.count);
    } else {
      console.log(`   ‚úÖ Todas as quantidades s√£o v√°lidas`);
    }

    // 4. Verificar status inv√°lidos
    console.log('\n4Ô∏è‚É£  Verificando status inv√°lidos...');
    const [invalidStatus] = await sql`
      SELECT COUNT(*) as count 
      FROM material_requests
      WHERE deleted_at IS NULL 
      AND status NOT IN ('Pendente', 'Em Separa√ß√£o', 'Conclu√≠do', 'Cancelado')
    `;

    if (parseInt(invalidStatus.count) > 0) {
      console.log(`   ‚ö†Ô∏è  ${invalidStatus.count} solicita√ß√µes com status inv√°lido`);
      totalIssues += parseInt(invalidStatus.count);
    } else {
      console.log(`   ‚úÖ Todos os status s√£o v√°lidos`);
    }

    // 5. Verificar completed_at sem status Conclu√≠do
    console.log('\n5Ô∏è‚É£  Verificando inconsist√™ncias de conclus√£o...');
    const [inconsistentCompletion] = await sql`
      SELECT COUNT(*) as count 
      FROM material_requests
      WHERE deleted_at IS NULL 
      AND ((status = 'Conclu√≠do' AND completed_at IS NULL) 
           OR (status != 'Conclu√≠do' AND completed_at IS NOT NULL))
    `;

    if (parseInt(inconsistentCompletion.count) > 0) {
      console.log(`   ‚ö†Ô∏è  ${inconsistentCompletion.count} solicita√ß√µes com dados de conclus√£o inconsistentes`);
      totalIssues += parseInt(inconsistentCompletion.count);
    } else {
      console.log(`   ‚úÖ Dados de conclus√£o est√£o consistentes`);
    }

    // 6. Verificar sess√µes expiradas n√£o revogadas
    console.log('\n6Ô∏è‚É£  Verificando sess√µes expiradas...');
    const [expiredSessions] = await sql`
      SELECT COUNT(*) as count 
      FROM sessions
      WHERE expires_at < CURRENT_TIMESTAMP 
      AND revoked_at IS NULL
    `;

    if (parseInt(expiredSessions.count) > 0) {
      console.log(`   ‚ö†Ô∏è  ${expiredSessions.count} sess√µes expiradas n√£o revogadas`);
      console.log(`      Limpando automaticamente...`);
      
      await sql`
        UPDATE sessions 
        SET revoked_at = CURRENT_TIMESTAMP 
        WHERE expires_at < CURRENT_TIMESTAMP 
        AND revoked_at IS NULL
      `;
      
      console.log(`      ‚úÖ Sess√µes limpas`);
    } else {
      console.log(`   ‚úÖ Nenhuma sess√£o expirada pendente`);
    }

    // 7. Estat√≠sticas gerais
    console.log('\nüìä Estat√≠sticas Gerais:');
    
    const [stats] = await sql`
      SELECT 
        (SELECT COUNT(*) FROM users WHERE deleted_at IS NULL) as total_users,
        (SELECT COUNT(*) FROM material_requests WHERE deleted_at IS NULL) as total_requests,
        (SELECT COUNT(*) FROM request_history) as total_history,
        (SELECT COUNT(*) FROM audit_logs) as total_audit_logs,
        (SELECT COUNT(*) FROM sessions WHERE revoked_at IS NULL) as active_sessions
    `;

    console.log(`   üë• Usu√°rios ativos: ${stats.total_users}`);
    console.log(`   üì¶ Solicita√ß√µes ativas: ${stats.total_requests}`);
    console.log(`   üìã Registros de hist√≥rico: ${stats.total_history}`);
    console.log(`   üîç Logs de auditoria: ${stats.total_audit_logs}`);
    console.log(`   üîê Sess√µes ativas: ${stats.active_sessions}`);

    // 8. Tamanho estimado do banco
    console.log('\nüíæ Tamanho das Tabelas:');
    
    const tableSizes = await sql`
      SELECT 
        tablename,
        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size
      FROM pg_tables
      WHERE schemaname = 'public'
      ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
    `;

    tableSizes.forEach(table => {
      console.log(`   üìä ${table.tablename}: ${table.size}`);
    });

    // Resumo final
    console.log('\n' + '='.repeat(50));
    if (totalIssues === 0) {
      console.log('‚úÖ VERIFICA√á√ÉO CONCLU√çDA - Nenhum problema encontrado!');
    } else {
      console.log(`‚ö†Ô∏è  VERIFICA√á√ÉO CONCLU√çDA - ${totalIssues} problema(s) encontrado(s)`);
      console.log('   Revise os itens marcados acima.');
    }
    console.log('='.repeat(50) + '\n');

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
    process.exit(1);
  }
}

// Executar
checkIntegrity().catch(error => {
  console.error('‚ùå Erro fatal:', error);
  process.exit(1);
});

